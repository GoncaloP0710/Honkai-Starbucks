"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeveledSkillTreeNode = exports.SkillTreeNode = void 0;
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = require("../../../errors/AssetsNotFoundError");
const Skill_1 = require("./Skill");
const TextAssets_1 = require("../../assets/TextAssets");
const hash_utils_1 = require("../../../utils/hash_utils");
const ImageAssets_1 = require("../../assets/ImageAssets");
const StatProperty_1 = require("../../StatProperty");
const DynamicTextAssets_1 = require("../../assets/DynamicTextAssets");
const CachedAssetsManager_1 = require("../../../client/CachedAssetsManager");
const ts_utils_1 = require("../../../utils/ts_utils");
class SkillTreeNode {
    constructor(id, client, nodeIndexToUse = 0) {
        this.id = id;
        this.client = client;
        const _data = client.cachedAssetsManager.getExcelData("AvatarSkillTreeConfig", this.id);
        if (!_data)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("SkillTreeNode", this.id);
        this._nodesData = Object.values(_data);
        const json = new config_file_js_1.JsonReader(CachedAssetsManager_1.excelJsonOptions, this._nodesData[nodeIndexToUse]);
        this.characterId = json.getAsNumber("AvatarID");
        this.maxLevel = json.getAsNumber("MaxLevel");
        this.isUnlockedByDefault = json.getAsBooleanWithDefault(false, "DefaultUnlock");
        this.levelUpSkills = json.get("LevelUpSkillID").mapArray((_, skillId) => new Skill_1.Skill(skillId.getAsNumber(), this.client));
        if (this.levelUpSkills.length === 0 && json.getAsString("PointName") === "")
            throw new Error(`SkillTreeNode must have a name.\nID: ${this.id}, Level: ${this["level"] ?? 1}\nIf you encounter this error, please create an issue at https://github.com/yuko1101/starrail.js/issues`);
        this.name = this.levelUpSkills.length > 0 ? this.levelUpSkills[0].name : new TextAssets_1.TextAssets((0, hash_utils_1.getStableHash)(json.getAsString("PointName")), this.client);
        this.icon = new ImageAssets_1.ImageAssets(json.getAsString("IconPath"), this.client);
        this.previousNodeId = json.getAsNumberWithDefault(null, "PrePoint", 0);
    }
    getSkillTreeNodeByLevel(level) {
        return new LeveledSkillTreeNode(this._nodesData[level.base - 1], level, this.client);
    }
    getPreviousNodes() {
        if (this.previousNodeId === null)
            return null;
        return new SkillTreeNode(this.previousNodeId, this.client);
    }
    getNextNodes() {
        const nodesData = this.client.cachedAssetsManager._getExcelData("AvatarSkillTreeConfig");
        const json = new config_file_js_1.JsonReader(CachedAssetsManager_1.excelJsonOptions, nodesData);
        const nextNodes = json.filterObject((_, node) => node.getAsNumberWithDefault(null, "PrePoint", 0) === this.id);
        return nextNodes.map(([nodeId]) => new SkillTreeNode(Number(nodeId), this.client));
    }
}
exports.SkillTreeNode = SkillTreeNode;
class LeveledSkillTreeNode extends SkillTreeNode {
    constructor(data, level, client) {
        // skill tree node data with base level
        const json = new config_file_js_1.JsonReader(CachedAssetsManager_1.excelJsonOptions, data);
        const id = json.getAsNumber("PointID");
        super(id, client, level.base - 1);
        this._data = data;
        this.level = level;
        // since the skill that can have extra level does not have any stats, we can safely assume that we can use the base level skill to get the stats
        this.stats = json.get("StatusAddList").mapArray((_, s) => new StatProperty_1.StatPropertyValue(s.getAsString("PropertyType"), s.getAsNumber("Value", "Value"), this.client));
        this.paramList = this.paramList = json.get("ParamList").mapArray((_, v) => v.getAsNumber("Value"));
        this.description = new DynamicTextAssets_1.DynamicTextAssets((0, hash_utils_1.getStableHash)(json.getAsString("PointDesc")), { paramList: this.paramList }, this.client);
    }
    hasSimpleDescription() {
        return this.levelUpSkills.length > 0 && this.levelUpSkills.some(s => s.getSkillByLevel(this.level).simpleDescription);
    }
    getFullDescription(simple) {
        if (this.levelUpSkills.length > 0) {
            const leveledSkills = this.levelUpSkills.map(s => s.getSkillByLevel(this.level));
            const skillDescriptions = leveledSkills.map(s => {
                const fallback = s.description ?? s.simpleDescription;
                const desc = (simple ? s.simpleDescription : s.description) ?? fallback;
                if (!desc)
                    return null;
                return { desc, ref: s, simple: desc === s.simpleDescription };
            }).filter(ts_utils_1.nonNullable);
            if (skillDescriptions.length > 0)
                return skillDescriptions;
        }
        if (this.stats.length > 0) {
            const statDescriptions = this.stats.map(s => {
                const desc = s.nameSkillTree;
                if (!desc)
                    return null;
                return { desc, ref: s, simple: false };
            }).filter(ts_utils_1.nonNullable);
            if (statDescriptions.length > 0)
                return statDescriptions;
        }
        return [{ desc: this.description, ref: null, simple: false }];
    }
}
exports.LeveledSkillTreeNode = LeveledSkillTreeNode;
